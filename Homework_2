# load the ade4 pack
library(ade4)
library(car)
library(caret)
# reading env and fish data
data(doubs)
env <- doubs$env
fish <- doubs$fish

# summarizing fish abundance data by sites
fish_sum <- apply(fish, 1, sum)
fish_df <- data.frame(Site = rownames(fish), Fish_Abundance = fish_sum)

# combining env and total fish to a new data frame named as "env_fish".
env_fish <- cbind(env, fish_df[match(rownames(env), fish_df$Site), 2])

# visualizing the features of the new env_fish set using scatterplot.
plot(env_fish[, 1:11], env_fish[,12], cex=0.5, pch=".")
names(env_fish)[12] <- "Fish_Abundance"

# Examine the linear relationship between environmental variables 
# and total fish abundance at the site.
cor(env_fish[, 1:11], env_fish[, 12], method = "pearson")

# deleting sites without fish.
env_fish <- env_fish[rowSums(fish) > 0, ]

# removing all rows where any column contains an outlier. 
env_fish <- env_fish[complete.cases(env_fish), ]

nzv <- nearZeroVar(env_fish[, 1:11])
if (length(nzv) > 0) {
  env_fish <- env_fish[, -nzv]
}
# identifying near zero-variance, outlies of the env variables. 
# detecting the collinearity among env variables or removing highly correlated features (with an absolute correlation of 0.75 or higher)  
cor.env <- cor(env_fish[, 1:11])
highlyCor <- findCorrelation(cor.env, cutoff = 0.75)
env_fish <- env_fish[, -highlyCor]

#  the env variables are scaled and centered before training a model.
env_fish[, 1:5] <- scale(env_fish[, 1:5], center = TRUE, scale = TRUE)

# splitting data into training and test sets, 
# and visualizing the features and targets of the training set
set.seed(437)
trainIndex <- sample(1:nrow(env_fish), 0.7*nrow(env_fish))
train <- env_fish[trainIndex, ]
test <- env_fish[-trainIndex, ]
 
train$Fish_Abundance <- as.numeric(train$Fish_Abundance)
test$Fish_Abundance <- as.numeric(test$Fish_Abundance)
# Creating and evaluating a baseline model between the environmental variables 
# and the total fish abundance with the tree-based algorithm
ctrl <- trainControl(method = "repeatedcv", 
                     number = 5, 
                     repeats = 3, 
                     summaryFunction = defaultSummary)

# Train the random forest regression model
rf_model <- train(Fish_Abundance ~ ., 
                  data = train, 
                  method = "rf",
                  metric = "RMSE",
                  trControl = ctrl)
# Prediction model
predictions <- predict(rf_model, newdata = test)

print(predictions)
print(rf_model)
